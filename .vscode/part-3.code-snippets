{
	"1.avm": {
		"prefix": "avm",
		"description": "avm",
		"scope": "bicep",
		"body": [
			"targetScope = 'subscription'",
			"",
			"param location string = 'northeurope'",
			"@secure()",
			"param password string",
			"@secure()",
			"param githubpat string",
			"param workloadName string",
			"param applicationFQDN string",
			"",
			"module hostingEnvironment 'br/public:avm/ptn/aca-lza/hosting-environment:0.5.0' = {",
			"  name: 'hostingEnvironmentDeployment'",
			"  params: {",
			"    // Required parameters",
			"    applicationGatewayCertificateKeyName: 'appgwcert'",
			"    deploymentSubnetAddressPrefix: '10.1.4.0/24'",
			"    enableApplicationInsights: true",
			"    enableDaprInstrumentation: false",
			"    spokeApplicationGatewaySubnetAddressPrefix: '10.1.3.0/24'",
			"    spokeInfraSubnetAddressPrefix: '10.1.0.0/23'",
			"    spokePrivateEndpointsSubnetAddressPrefix: '10.1.2.0/27'",
			"    spokeVNetAddressPrefixes: [",
			"      '10.1.0.0/21'",
			"    ]",
			"    vmAdminPassword: password",
			"    vmJumpBoxSubnetAddressPrefix: '10.1.2.32/27'",
			"    vmSize: 'Standard_B1s'",
			"    // Non-required parameters",
			"    deployZoneRedundantResources: true",
			"    enableDdosProtection: true",
			"    environment: 'prod'",
			"    exposeContainerAppsWith: 'applicationGateway'",
			"    location: location",
			"    storageAccountType: 'Premium_LRS'",
			"    tags: {",
			"      environment: 'prod'",
			"    }",
			"    vmAuthenticationType: 'sshPublicKey'",
			"    vmJumpboxOSType: 'linux'",
			"    workloadName: workloadName",
			"    applicationGatewayBackendFqdn: applicationFQDN",
			"  }",
			"}",
			"",
			"output AZURE_CONTAINERAPPSENV_RESOURCE_ID string = hostingEnvironment.outputs.containerAppsEnvironmentResourceId",
			"output AZURE_CONTAINERREGISTRY_RESOURCE_ID string = hostingEnvironment.outputs.containerRegistryResourceId",
			"output AZURE_KEYVAULT_RESOURCE_ID string = hostingEnvironment.outputs.keyVaultResourceId",
			""
		]
	},
	"2.hostedrunners": {
		"prefix": "hostedrunners",
		"description": "hostedrunners",
		"scope": "bicep",
		"body": [
			"// hosted runner Jobs application",
			"module hostedRunner 'br/public:avm/res/app/job:0.5.2' = {",
			"  name: 'hostedRunnerDeployment'",
			"  scope: resourceGroup('rg-advworks-spoke-prod-neu')",
			"  params: {",
			"    name: 'hosted-runner-job'",
			"    location: location",
			"    tags: {",
			"      environment: 'prod'",
			"    }",
			"    environmentResourceId: hostingEnvironment.outputs.containerAppsEnvironmentResourceId",
			"    workloadProfileName: 'general-purpose'",
			"    triggerType: 'Event'",
			"    replicaTimeout: 1800",
			"    replicaRetryLimit: 0",
			"    secrets: [",
			"      {",
			"        name: 'personal-access-token'",
			"        value: githubpat",
			"      }",
			"    ]",
			"    eventTriggerConfig: {",
			"      parallelism: 1",
			"      replicaCompletionCount: 1",
			"      scale: {",
			"        minExecutions: 0",
			"        maxExecutions: 10",
			"        pollingInterval: 30",
			"        rules: [",
			"          {",
			"            name: 'github-runner'",
			"            type: 'github-runner'",
			"            metadata: {",
			"              githubAPIURL: 'https://api.github.com'",
			"              owner: 'kpantos'",
			"              runnerScope : 'repo'",
			"              repos: 'AdventureWorks.Web'",
			"              targetWorkflowQueueLength: '1'",
			"            }",
			"            auth: [",
			"              {",
			"                secretRef: 'personal-access-token'",
			"                triggerParameter: 'personalAccessToken'",
			"              }",
			"            ]",
			"          }",
			"        ]",
			"      }",
			"    }",
			"    containers: [",
			"      {",
			"        name: 'hosted-runner-job'",
			"        image: 'docker.io/kpantos/github-actions-runner:1.6'",
			"        resources: {",
			"          cpu: '2.0'",
			"          memory: '4Gi'",
			"        }",
			"        env: [",
			"          {",
			"            name: 'GITHUB_PAT'",
			"            secretRef: 'personal-access-token'",
			"          }",
			"          {",
			"            name: 'GH_URL'",
			"            value: 'https://github.com/kpantos/AdventureWorks.Web'",
			"          }",
			"          {",
			"            name: 'REGISTRATION_TOKEN_API_URL'",
			"            value: 'https://api.github.com/repos/kpantos/AdventureWorks.Web/actions/runners/registration-token'",
			"          }",
			"        ]",
			"      }",
			"    ]",
			"  }",
			"}"
		]
	},
	"3.azd env new": {
		"prefix": "azd-env-new",
		"description": "",
		"scope": "plaintext",
		"body": [
			"azd env new"
		]
	},
	"4.azd env select": {
		"prefix": "azd-env-select",
		"description": "",
		"scope": "plaintext",
		"body": [
			"azd env select <<NAME>>"
		]
	},
	"5.azd provision": {
		"prefix": "azd-provision",
		"description": "",
		"scope": "plaintext",
		"body": [
			"azd provision"
		]
	},
	"6.azure-dev": {
		"prefix": "azure-dev",
		"description": "azure-dev",
		"scope": "github-actions-workflow",
		"body": [
			"# Run when commits are pushed to step-2-hostingenv",
			"on:",
			"  workflow_dispatch:",
			"",
			"# Set up permissions for deploying with secretless Azure federated credentials",
			"# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication",
			"permissions:",
			"  id-token: write",
			"  contents: read",
			"",
			"",
			"jobs:",
			"  build:",
			"    runs-on: ubuntu-latest",
			"    env:",
			"      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}",
			"      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}",
			"      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}",
			"      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}",
			"      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}",
			"    steps:",
			"      - name: Checkout",
			"        uses: actions/checkout@v4",
			"      - name: Install azd",
			"        uses: Azure/setup-azd@v2",
			"      - name: Log in with Azure (Federated Credentials)",
			"        run: |",
			"          azd auth login `",
			"            --client-id \"$Env:AZURE_CLIENT_ID\" `",
			"            --federated-credential-provider \"github\" `",
			"            --tenant-id \"$Env:AZURE_TENANT_ID\"",
			"        shell: pwsh",
			"",
			"",
			"      - name: Provision Infrastructure",
			"        run: azd provision --no-prompt",
			"        env:",
			"          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}",
			""
		]
	},
	"7.azure-app": {
		"prefix": "azure-app",
		"description": "azure-app",
		"scope": "github-actions-workflow",
		"body": [
			"# Run when commits are pushed to step-2-hostingenv",
			"on:",
			"  workflow_dispatch:",
			"",
			"# Set up permissions for deploying with secretless Azure federated credentials",
			"# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication",
			"permissions:",
			"  id-token: write",
			"  contents: read",
			"",
			"",
			"jobs:",
			"  build:",
			"    runs-on: self-hosted",
			"    env:",
			"      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}",
			"      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}",
			"      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}",
			"      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}",
			"      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}",
			"      REGISTRY : 'cradvworksdbqyjprodneu'",
			"      IMAGE : 'cradvworksdbqyjprodneu.azurecr.io/adventureworks-web:v\\${{ github.run_number }}'",
			"      AZURE_RESOURCE_GROUP : 'rg-advworks-spoke-prod-neu'",
			"      DB_SERVER_NAME : ${{ vars.DB_SERVER_NAME }}",
			"      DATABASE_NAME : ${{ vars.DATABASE_NAME }}",
			"      DB_USERNAME : ${{ vars.DB_USERNAME }}",
			"    steps:",
			"      - name: Checkout",
			"        uses: actions/checkout@v4",
			"      ",
			"      - name: Azure CLI Login",
			"        uses: azure/login@v2.2.0",
			"        with:",
			"          client-id: ${{ vars.AZURE_CLIENT_ID }}",
			"          tenant-id: ${{ vars.AZURE_TENANT_ID }}",
			"          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}",
			"",
			"      - name: Build and Push Container Image",
			"        run: |",
			"          az acr build --registry ${{ env.REGISTRY }} --image ${{ env.IMAGE }} --agent-pool agentpool ."
		]
	},
	"8.quarantine disable": {
		"prefix": "quarantine",
		"description": "Disable ACR quarantine policy",
		"scope": "plaintext",
		"body": [
			"az resource update --ids $(az acr show --name <<myregistry>> --query id -o tsv) --set properties.policies.quarantinePolicy.status=disabled"
		]
	},
	"9.deployApp bicep": {
		"prefix": "app-bicep",
		"description": "",
		"scope": "bicep",
		"body": [
			"targetScope = 'resourceGroup'",
			"",
			"param location string = resourceGroup().location",
			"param image string",
			"param server string",
			"param envName string = 'poc'",
			"param tags object = {",
			"  environment: envName",
			"}",
			"param name string",
			"param containerAppsEnvironmentResourceId string",
			"param managedIdentityResourceId string",
			"param workloadProfileName string = 'general-purpose'",
			"",
			"param dbServerName string",
			"param databaseName string",
			"param dbServerAdminLogin string",
			"@secure()",
			"param dbServerAdminPassword string",
			"",
			"",
			"module advworksApplication 'br/public:avm/res/app/container-app:0.12.0' = {",
			"  name: 'application-deployment'",
			"  params: {",
			"    name: name",
			"    location: location",
			"    tags: tags",
			"    environmentResourceId: containerAppsEnvironmentResourceId",
			"    managedIdentities: {",
			"      userAssignedResourceIds: [",
			"        managedIdentityResourceId",
			"      ]",
			"    }",
			"    workloadProfileName: workloadProfileName",
			"    containers: [",
			"      {",
			"        name: name",
			"        image: image",
			"        resources: {",
			"          cpu: json('0.25')",
			"          memory: '0.5Gi'",
			"        }",
			"        env: [",
			"          {",
			"            name: 'ConnectionStrings__sampledbContext'",
			"            secretRef: 'database-connection-string'",
			"          }",
			"        ]",
			"      }",
			"    ]",
			"    registries: [",
			"      {",
			"        identity: managedIdentityResourceId",
			"        server: server",
			"      }",
			"    ]",
			"    scaleMinReplicas: 2",
			"    scaleMaxReplicas: 10",
			"    activeRevisionsMode: 'Single'",
			"    ingressExternal: true",
			"    ingressAllowInsecure: false",
			"    ingressTargetPort: 80",
			"    ingressTransport: 'auto'",
			"    secrets: {",
			"      secureList: [",
			"      {",
			"        name: 'database-connection-string'",
			"        value: 'Server=tcp:${dbServerName}.${environment().suffixes.sqlServerHostname},1433;Initial Catalog=${databaseName};Persist Security Info=False;User ID=${dbServerAdminLogin};Password=${dbServerAdminPassword};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'",
			"      }",
			"    ]}",
			"  }",
			"}",
			"",
			"// ------------------",
			"// OUTPUTS",
			"// ------------------",
			"",
			"@description('The FQDN of the application deployed.')",
			"output advworksAppFqdn string = advworksApplication.outputs.fqdn"
		]
	},
	"10.deploy-app": {
		"prefix": "app-deploy",
		"description": "",
		"scope": "yaml,yml",
		"body": [
			"      - name: Deploy to Azure",
			"        run: |",
			"          az acr repository list -g ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.REGISTRY }}",
			"          az acr repository show-tags --name ${{ env.REGISTRY }} --repository adventureworks-web --detail",
			"          az deployment group create \\",
			"            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \\",
			"            --template-file deployApp.bicep \\",
			"            --parameters deployApp.parameters.json \\",
			"            --parameters server='${{ env.REGISTRY }}.azurecr.io' image='${{ env.IMAGE }}' dbServerName='${{ env.DB_SERVER_NAME }}' databaseName='${{ env.DATABASE_NAME }}' dbServerAdminLogin='${{ env.DB_USERNAME }}' dbServerAdminPassword='${{ secrets.DB_PASSWORD }}'"
		]
	}
	// Place your AdventureWorks.Web workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}